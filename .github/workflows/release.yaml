name: Build and Release

on:
  push:
    tags:
      - '*'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get dependencies
        run: go mod download

      - name: Compile for Linux
        env:
          GOOS: linux
          GOARCH: amd64
        run: go build -v -o build/elden-ring-ersc-updater-linux-amd64

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: build/elden-ring-ersc-updater-linux-amd64

  build-windows:
    name: Build for Windows
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get dependencies
        run: go mod download

      - name: Compile for Windows
        env:
          GOOS: windows
          GOARCH: amd64
        run: go build -v -o build/elden-ring-ersc-updater-windows-amd64.exe

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: build/elden-ring-ersc-updater-windows-amd64.exe

  build-macos:
    name: Build for MacOS
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Check out code
        uses: actions/checkout@v4

      - name: Get dependencies
        run: go mod download

      - name: Compile for MacOS
        env:
          GOOS: darwin
          GOARCH: amd64
        run: go build -v -o build/elden-ring-ersc-updater-darwin-amd64

      - name: Upload MacOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: build/elden-ring-ersc-updater-darwin-amd64

  collect-artifacts:
    name: Collect All Artifacts
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - name: Create build directory
        run: mkdir -p build

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-artifact
          path: build

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-artifact
          path: build

      - name: Download MacOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-artifact
          path: build

      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/*

  release:
    name: Release
    needs: collect-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build

      - name: Get or Create Release
        id: release
        run: |
          # Extract tag name from github.ref (refs/tags/v1.0.0 -> v1.0.0)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Tag name: $TAG_NAME"

          # Try to get the existing release
          RELEASE_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG_NAME" \
            | jq -r '.upload_url // empty')

          # If release doesn't exist, create it
          if [ -z "$RELEASE_URL" ]; then
            echo "Creating new release for tag $TAG_NAME"
            RELEASE_URL=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
              -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"Release $TAG_NAME\",\"draft\":false,\"prerelease\":false}" \
              | jq -r '.upload_url')
          else
            echo "Using existing release for tag $TAG_NAME"
          fi

          # Set the upload URL as output
          echo "upload_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      - name: Upload Release Assets
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./build/elden-ring-ersc-updater-linux-amd64
          asset_name: elden-ring-ersc-updater-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./build/elden-ring-ersc-updater-windows-amd64.exe
          asset_name: elden-ring-ersc-updater-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        id: upload-macos-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./build/elden-ring-ersc-updater-darwin-amd64
          asset_name: elden-ring-ersc-updater-darwin-amd64
          asset_content_type: application/octet-stream
